<?xml version="1.0"?>
<!DOCTYPE modification SYSTEM "http://www.elkarte.net/site/modification">
<modification xmlns="http://www.elkarte.net/site/modification" xmlns:elk="http://www.elkarte.net/">

	<id>Elkarte Contributors:ElkArte_108_patch</id>
	<version>1.0.0</version>
	<file name="BOARDDIR/SSI.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.0.7
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.0.8
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[define('ELK', 'SSI');

// Shortcut for the browser cache stale
define('CACHE_STALE', '?107');

// We're going to want a few globals... these are all set later.
global $time_start, $maintenance, $msubject, $mmessage, $mbname, $language;]]></search>
			<add><![CDATA[define('ELK', 'SSI');

// Shortcut for the browser cache stale
define('CACHE_STALE', '?108');

// We're going to want a few globals... these are all set later.
global $time_start, $maintenance, $msubject, $mmessage, $mbname, $language;]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			$preview = 'first';

		$row['body'] = $row[$preview . '_body'];
		$row['subject'] = $row[$preview . '_body'];
		$row['id_msg'] = $row['id_' . $preview . '_msg'];
		$row['icon'] = $row[$preview . '_icon'];
		$row['id_member'] = $row[$preview . '_id_member'];]]></search>
			<add><![CDATA[			$preview = 'first';

		$row['body'] = $row[$preview . '_body'];
		$row['subject'] = $row[$preview . '_subject'];
		$row['id_msg'] = $row['id_' . $preview . '_msg'];
		$row['icon'] = $row[$preview . '_icon'];
		$row['id_member'] = $row[$preview . '_id_member'];]]></add>
		</operation>
	</file>
	<file name="BOARDDIR/index.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.0.7
 *
 */

$forum_version = 'ElkArte 1.0.7';
define('FORUM_VERSION', $forum_version);

// First things first, but not necessarily in that order.
define('ELK', 1);

// Shortcut for the browser cache stale
define('CACHE_STALE', '?107');

if (function_exists('set_magic_quotes_runtime'))
	@set_magic_quotes_runtime(0);]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.0.8
 *
 */

$forum_version = 'ElkArte 1.0.8';
define('FORUM_VERSION', $forum_version);

// First things first, but not necessarily in that order.
define('ELK', 1);

// Shortcut for the browser cache stale
define('CACHE_STALE', '?108');

if (function_exists('set_magic_quotes_runtime'))
	@set_magic_quotes_runtime(0);]]></add>
		</operation>
	</file>
	<file name="SOURCEDIR/Load.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.0.7
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.0.8
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	// Integration is cool.
	if (defined('ELK_INTEGRATION_SETTINGS'))
	{
		$integration_settings = unserialize(ELK_INTEGRATION_SETTINGS);
		foreach ($integration_settings as $hook => $function)
			add_integration_function($hook, $function);
	}]]></search>
			<add><![CDATA[	// Integration is cool.
	if (defined('ELK_INTEGRATION_SETTINGS'))
	{
		$integration_settings = Util::unserialize(ELK_INTEGRATION_SETTINGS);
		foreach ($integration_settings as $hook => $function)
			add_integration_function($hook, $function);
	}]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[
	if (empty($id_member) && isset($_COOKIE[$cookiename]))
	{
		// Fix a security hole in PHP 4.3.9 and below...
		if (preg_match('~^a:[34]:\{i:0;i:\d{1,8};i:1;s:(0|64):"([a-fA-F0-9]{64})?";i:2;[id]:\d{1,14};(i:3;i:\d;)?\}$~i', $_COOKIE[$cookiename]) == 1)
		{
			list ($id_member, $password) = @unserialize($_COOKIE[$cookiename]);
			$id_member = !empty($id_member) && strlen($password) > 0 ? (int) $id_member : 0;
		}
		else
			$id_member = 0;
	}
	elseif (empty($id_member) && isset($_SESSION['login_' . $cookiename]) && ($_SESSION['USER_AGENT'] == $req->user_agent() || !empty($modSettings['disableCheckUA'])))
	{
		// @todo Perhaps we can do some more checking on this, such as on the first octet of the IP?
		list ($id_member, $password, $login_span) = @unserialize($_SESSION['login_' . $cookiename]);
		$id_member = !empty($id_member) && strlen($password) == 64 && $login_span > time() ? (int) $id_member : 0;
	}
]]></search>
			<add><![CDATA[
	if (empty($id_member) && isset($_COOKIE[$cookiename]))
	{
		list ($id_member, $password) = serializeToJson($_COOKIE[$cookiename], function ($array_from) use ($cookiename) {
			global $modSettings;

			require_once(SUBSDIR . '/Auth.subs.php');
			$_COOKIE[$cookiename] = json_encode($array_from);
			setLoginCookie(60 * $modSettings['cookieTime'], $array_from[0], $array_from[1]);
		});
		$id_member = !empty($id_member) && strlen($password) > 0 ? (int) $id_member : 0;
	}
	elseif (empty($id_member) && isset($_SESSION['login_' . $cookiename]) && ($_SESSION['USER_AGENT'] == $req->user_agent() || !empty($modSettings['disableCheckUA'])))
	{
		// @todo Perhaps we can do some more checking on this, such as on the first octet of the IP?
		list ($id_member, $password, $login_span) = serializeToJson($_SESSION['login_' . $cookiename], function ($array_from) use ($cookiename) {
			$_SESSION['login_' . $cookiename] = json_encode($array_from);
		});
		$id_member = !empty($id_member) && strlen($password) == 64 && $login_span > time() ? (int) $id_member : 0;
	}
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		'language' => empty($user_settings['lngfile']) || empty($modSettings['userLanguage']) ? $language : $user_settings['lngfile'],
		'is_guest' => $id_member == 0,
		'is_admin' => in_array(1, $user_info['groups']),
		'theme' => empty($user_settings['id_theme']) ? 0 : $user_settings['id_theme'],
		'last_login' => empty($user_settings['last_login']) ? 0 : $user_settings['last_login'],
		'ip' => $req->client_ip(),]]></search>
			<add><![CDATA[		'language' => empty($user_settings['lngfile']) || empty($modSettings['userLanguage']) ? $language : $user_settings['lngfile'],
		'is_guest' => $id_member == 0,
		'is_admin' => in_array(1, $user_info['groups']),
		'is_mod' => false,
		'theme' => empty($user_settings['id_theme']) ? 0 : $user_settings['id_theme'],
		'last_login' => empty($user_settings['last_login']) ? 0 : $user_settings['last_login'],
		'ip' => $req->client_ip(),]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	if ($display_custom_fields && !empty($modSettings['displayFields']))
	{
		if (!isset($context['display_fields']))
			$context['display_fields'] = unserialize($modSettings['displayFields']);

		foreach ($context['display_fields'] as $custom)
		{]]></search>
			<add><![CDATA[	if ($display_custom_fields && !empty($modSettings['displayFields']))
	{
		if (!isset($context['display_fields']))
			$context['display_fields'] = Util::unserialize($modSettings['displayFields']);

		foreach ($context['display_fields'] as $custom)
		{]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		$context['user']['name'] = $txt['guest_title'];

	// Set up some additional interface preference context
	$context['admin_preferences'] = !empty($options['admin_preferences']) ? unserialize($options['admin_preferences']) : array();

	if (!$user_info['is_guest'])
		$context['minmax_preferences'] = !empty($options['minmax_preferences']) ? unserialize($options['minmax_preferences']) : array();
	// Guest may have collapsed the header, check the cookie to prevent collapse jumping
	elseif ($user_info['is_guest'] && isset($_COOKIE['upshrink']))
		$context['minmax_preferences'] = array('upshrink' => $_COOKIE['upshrink']);]]></search>
			<add><![CDATA[		$context['user']['name'] = $txt['guest_title'];

	// Set up some additional interface preference context
	if (!empty($options['admin_preferences']))
	{
		$context['admin_preferences'] = serializeToJson($options['admin_preferences'], function($array_form) {
			global $context;

			$context['admin_preferences'] = $array_form;
			require_once(SUBSDIR . '/Admin.subs.php');
			updateAdminPreferences();
		});
	}
	else
	{
		$context['admin_preferences'] = array();
	}

	if (!$user_info['is_guest'])
	{
		if (!empty($options['minmax_preferences']))
		{
			$context['minmax_preferences'] = serializeToJson($options['minmax_preferences'], function($array_form) {
				global $settings, $user_info;

				// Update the option.
				require_once(SUBSDIR . '/Themes.subs.php');
				updateThemeOptions(array($settings['theme_id'], $user_info['id'], 'minmax_preferences', json_encode($array_form)));
			});
		}
		else
		{
			$context['minmax_preferences'] = array();
		}
	}
	// Guest may have collapsed the header, check the cookie to prevent collapse jumping
	elseif ($user_info['is_guest'] && isset($_COOKIE['upshrink']))
		$context['minmax_preferences'] = array('upshrink' => $_COOKIE['upshrink']);]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	}

	return 1;
}]]></search>
			<add><![CDATA[	}

	return 1;
}

/**
 * This is necessary to support data stored in the pre-1.0.8 way (i.e. serialized)
 *
 * @param string $variable The string to convert
 * @param null|callable $save_callback The function that will save the data to the db
 * @return mixed[] the array
 */
function serializeToJson($variable, $save_callback = null)
{
	$array_form = json_decode($variable, true);

	// decoding failed, let's try with unserialize
	if ($array_form === null)
	{
		$array_form = Util::unserialize($variable);

		// If unserialize fails as well, let's just store an empty array
		if ($array_form === false)
		{
			$array_form = array();
		}

		// Time to update the value if necessary
		if ($save_callback !== null)
		{
			$save_callback($array_form);
		}
	}

	return $array_form;
}]]></add>
		</operation>
	</file>
	<file name="SOURCEDIR/Logging.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.0.4
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.0.8
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[
		$db->query('', '
			UPDATE {db_prefix}log_online
			SET log_time = {int:log_time}, ip = IFNULL(INET_ATON({string:ip}), 0), url = {string:url}
			WHERE session = {string:session}',
			array(
				'log_time' => time(),]]></search>
			<add><![CDATA[
		$db->query('', '
			UPDATE {db_prefix}log_online
			SET log_time = {int:log_time}, ip = {string:ip}, url = {string:url}
			WHERE session = {string:session}',
			array(
				'log_time' => time(),]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[
		$db->insert($do_delete ? 'ignore' : 'replace',
			'{db_prefix}log_online',
			array('session' => 'string', 'id_member' => 'int', 'id_spider' => 'int', 'log_time' => 'int', 'ip' => 'raw', 'url' => 'string'),
			array($session_id, $user_info['id'], empty($_SESSION['id_robot']) ? 0 : $_SESSION['id_robot'], time(), 'IFNULL(INET_ATON(\'' . $user_info['ip'] . '\'), 0)', $serialized),
			array('session')
		);
	}]]></search>
			<add><![CDATA[
		$db->insert($do_delete ? 'ignore' : 'replace',
			'{db_prefix}log_online',
			array('session' => 'string', 'id_member' => 'int', 'id_spider' => 'int', 'log_time' => 'int', 'ip' => 'string', 'url' => 'string'),
			array($session_id, $user_info['id'], empty($_SESSION['id_robot']) ? 0 : $_SESSION['id_robot'], time(), $user_info['ip'], $serialized),
			array('session')
		);
	}]]></add>
		</operation>
	</file>
	<file name="SOURCEDIR/Subs.php">
		<operation>
			<search position="replace" regexp="true"><![CDATA[ \* @version 1\.0\.\d]]></search>
			<add><![CDATA[ * @version 1.0.8]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	if (!empty($modSettings['currentAttachmentUploadDir']))
	{
		if (!is_array($modSettings['attachmentUploadDir']))
			$modSettings['attachmentUploadDir'] = unserialize($modSettings['attachmentUploadDir']);
		$path = isset($modSettings['attachmentUploadDir'][$dir]) ? $modSettings['attachmentUploadDir'][$dir] : $modSettings['basedirectory_for_attachments'];
	}
	else]]></search>
			<add><![CDATA[	if (!empty($modSettings['currentAttachmentUploadDir']))
	{
		if (!is_array($modSettings['attachmentUploadDir']))
			$modSettings['attachmentUploadDir'] = Util::unserialize($modSettings['attachmentUploadDir']);
		$path = isset($modSettings['attachmentUploadDir'][$dir]) ? $modSettings['attachmentUploadDir'][$dir] : $modSettings['basedirectory_for_attachments'];
	}
	else]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	$engines = array();
	if (!empty($modSettings['additional_search_engines']))
	{
		$search_engines = unserialize($modSettings['additional_search_engines']);
		foreach ($search_engines as $engine)
			$engines[strtolower(preg_replace('~[^A-Za-z0-9 ]~', '', $engine['name']))] = $engine;
	}]]></search>
			<add><![CDATA[	$engines = array();
	if (!empty($modSettings['additional_search_engines']))
	{
		$search_engines = Util::unserialize($modSettings['additional_search_engines']);
		foreach ($search_engines as $engine)
			$engines[strtolower(preg_replace('~[^A-Za-z0-9 ]~', '', $engine['name']))] = $engine;
	}]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	if (!isset($modSettings['scheduleTaskImmediate']))
		$scheduleTaskImmediate = array();
	else
		$scheduleTaskImmediate = unserialize($modSettings['scheduleTaskImmediate']);

	// If it has not been scheduled, the do so now
	if (!isset($scheduleTaskImmediate[$task]))]]></search>
			<add><![CDATA[	if (!isset($modSettings['scheduleTaskImmediate']))
		$scheduleTaskImmediate = array();
	else
		$scheduleTaskImmediate = Util::unserialize($modSettings['scheduleTaskImmediate']);

	// If it has not been scheduled, the do so now
	if (!isset($scheduleTaskImmediate[$task]))]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	if (!isset($modSettings['scheduleTaskImmediate']))
		return;
	else
		$scheduleTaskImmediate = unserialize($modSettings['scheduleTaskImmediate']);

	// Clear / remove the task if it was set
	if (isset($scheduleTaskImmediate[$task]))]]></search>
			<add><![CDATA[	if (!isset($modSettings['scheduleTaskImmediate']))
		return;
	else
		$scheduleTaskImmediate = Util::unserialize($modSettings['scheduleTaskImmediate']);

	// Clear / remove the task if it was set
	if (isset($scheduleTaskImmediate[$task]))]]></add>
		</operation>
	</file>
	<file name="ADMINDIR/ManageAttachments.controller.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.0.2
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.0.8
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[				if (!empty($_POST['use_subdirectories_for_attachments']) && !empty($modSettings['attachment_basedirectories']))
				{
					if (!is_array($modSettings['attachment_basedirectories']))
						$modSettings['attachment_basedirectories'] = unserialize($modSettings['attachment_basedirectories']);
				}
				else
					$modSettings['attachment_basedirectories'] = array();]]></search>
			<add><![CDATA[				if (!empty($_POST['use_subdirectories_for_attachments']) && !empty($modSettings['attachment_basedirectories']))
				{
					if (!is_array($modSettings['attachment_basedirectories']))
						$modSettings['attachment_basedirectories'] = Util::unserialize($modSettings['attachment_basedirectories']);
				}
				else
					$modSettings['attachment_basedirectories'] = array();]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		require_once(SUBSDIR . '/Attachments.subs.php');

		// Get the current attachment directory.
		$modSettings['attachmentUploadDir'] = unserialize($modSettings['attachmentUploadDir']);
		$context['attachmentUploadDir'] = $modSettings['attachmentUploadDir'][$modSettings['currentAttachmentUploadDir']];

		// First time here?]]></search>
			<add><![CDATA[		require_once(SUBSDIR . '/Attachments.subs.php');

		// Get the current attachment directory.
		$modSettings['attachmentUploadDir'] = Util::unserialize($modSettings['attachmentUploadDir']);
		$context['attachmentUploadDir'] = $modSettings['attachmentUploadDir'][$modSettings['currentAttachmentUploadDir']];

		// First time here?]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[
		$context['attach_multiple_dirs'] = count($attach_dirs) > 1 ? true : false;
		$context['attach_dirs'] = $attach_dirs;
		$context['base_dirs'] = !empty($modSettings['attachment_basedirectories']) ? unserialize($modSettings['attachment_basedirectories']) : array();
		$context['checked'] = isset($_SESSION['checked']) ? $_SESSION['checked'] : true;
		if (!empty($_SESSION['results']))
		{]]></search>
			<add><![CDATA[
		$context['attach_multiple_dirs'] = count($attach_dirs) > 1 ? true : false;
		$context['attach_dirs'] = $attach_dirs;
		$context['base_dirs'] = !empty($modSettings['attachment_basedirectories']) ? Util::unserialize($modSettings['attachment_basedirectories']) : array();
		$context['checked'] = isset($_SESSION['checked']) ? $_SESSION['checked'] : true;
		if (!empty($_SESSION['results']))
		{]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		{
			// Just use the current path for temp files.
			if (!is_array($modSettings['attachmentUploadDir']))
				$modSettings['attachmentUploadDir'] = unserialize($modSettings['attachmentUploadDir']);
			$attach_dirs = $modSettings['attachmentUploadDir'];

			$current_check = 0;]]></search>
			<add><![CDATA[		{
			// Just use the current path for temp files.
			if (!is_array($modSettings['attachmentUploadDir']))
				$modSettings['attachmentUploadDir'] = Util::unserialize($modSettings['attachmentUploadDir']);
			$attach_dirs = $modSettings['attachmentUploadDir'];

			$current_check = 0;]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[
		// Since this needs to be done eventually.
		if (!is_array($modSettings['attachmentUploadDir']))
			$modSettings['attachmentUploadDir'] = unserialize($modSettings['attachmentUploadDir']);

		if (!isset($modSettings['attachment_basedirectories']))
			$modSettings['attachment_basedirectories'] = array();
		elseif (!is_array($modSettings['attachment_basedirectories']))
			$modSettings['attachment_basedirectories'] = unserialize($modSettings['attachment_basedirectories']);

		$errors = array();
]]></search>
			<add><![CDATA[
		// Since this needs to be done eventually.
		if (!is_array($modSettings['attachmentUploadDir']))
			$modSettings['attachmentUploadDir'] = Util::unserialize($modSettings['attachmentUploadDir']);

		if (!isset($modSettings['attachment_basedirectories']))
			$modSettings['attachment_basedirectories'] = array();
		elseif (!is_array($modSettings['attachment_basedirectories']))
			$modSettings['attachment_basedirectories'] = Util::unserialize($modSettings['attachment_basedirectories']);

		$errors = array();
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[							'attachment_basedirectories' => serialize($modSettings['attachment_basedirectories']),
							'basedirectory_for_attachments' => $base,
						));
						$modSettings['attachment_basedirectories'] = unserialize($modSettings['attachment_basedirectories']);
					}
				}
]]></search>
			<add><![CDATA[							'attachment_basedirectories' => serialize($modSettings['attachment_basedirectories']),
							'basedirectory_for_attachments' => $base,
						));
						$modSettings['attachment_basedirectories'] = Util::unserialize($modSettings['attachment_basedirectories']);
					}
				}
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[							{
								unset($modSettings['attachment_basedirectories'][$id]);
								updateSettings(array('attachment_basedirectories' => serialize($modSettings['attachment_basedirectories'])));
								$modSettings['attachment_basedirectories'] = unserialize($modSettings['attachment_basedirectories']);
							}
						}
						else]]></search>
			<add><![CDATA[							{
								unset($modSettings['attachment_basedirectories'][$id]);
								updateSettings(array('attachment_basedirectories' => serialize($modSettings['attachment_basedirectories'])));
								$modSettings['attachment_basedirectories'] = Util::unserialize($modSettings['attachment_basedirectories']);
							}
						}
						else]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			if ($_POST['current_dir'] != $modSettings['currentAttachmentUploadDir'] && !empty($modSettings['last_attachments_directory']) && (isset($modSettings['last_attachments_directory'][$_POST['current_dir']]) || isset($modSettings['last_attachments_directory'][0])))
			{
				if (!is_array($modSettings['last_attachments_directory']))
					$modSettings['last_attachments_directory'] = unserialize($modSettings['last_attachments_directory']);
				$num = substr(strrchr($modSettings['attachmentUploadDir'][$_POST['current_dir']], '_'), 1);

				if (is_numeric($num))]]></search>
			<add><![CDATA[			if ($_POST['current_dir'] != $modSettings['currentAttachmentUploadDir'] && !empty($modSettings['last_attachments_directory']) && (isset($modSettings['last_attachments_directory'][$_POST['current_dir']]) || isset($modSettings['last_attachments_directory'][0])))
			{
				if (!is_array($modSettings['last_attachments_directory']))
					$modSettings['last_attachments_directory'] = Util::unserialize($modSettings['last_attachments_directory']);
				$num = substr(strrchr($modSettings['attachmentUploadDir'][$_POST['current_dir']], '_'), 1);

				if (is_numeric($num))]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		require_once(SUBSDIR . '/ManageAttachments.subs.php');

		// The list(s) of directory's that are available.
		$modSettings['attachmentUploadDir'] = unserialize($modSettings['attachmentUploadDir']);
		if (!empty($modSettings['attachment_basedirectories']))
			$modSettings['attachment_basedirectories'] = unserialize($modSettings['attachment_basedirectories']);
		else
			$modSettings['basedirectory_for_attachments'] = array();
]]></search>
			<add><![CDATA[		require_once(SUBSDIR . '/ManageAttachments.subs.php');

		// The list(s) of directory's that are available.
		$modSettings['attachmentUploadDir'] = Util::unserialize($modSettings['attachmentUploadDir']);
		if (!empty($modSettings['attachment_basedirectories']))
			$modSettings['attachment_basedirectories'] = Util::unserialize($modSettings['attachment_basedirectories']);
		else
			$modSettings['basedirectory_for_attachments'] = array();
]]></add>
		</operation>
	</file>
	<file name="ADMINDIR/ManageMaillist.controller.php">
		<operation>
			<search position="replace"><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.0.4
 *
 */
]]></search>
			<add><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.0.8
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[
		// Load any existing email => board values used for new topic creation
		$context['maillist_from_to_board'] = array();
		$data = (!empty($modSettings['maillist_receiving_address'])) ? unserialize($modSettings['maillist_receiving_address']) : array();
		foreach ($data as $key => $addr)
		{
			$context['maillist_from_to_board'][$key] = array(]]></search>
			<add><![CDATA[
		// Load any existing email => board values used for new topic creation
		$context['maillist_from_to_board'] = array();
		$data = (!empty($modSettings['maillist_receiving_address'])) ? Util::unserialize($modSettings['maillist_receiving_address']) : array();
		foreach ($data as $key => $addr)
		{
			$context['maillist_from_to_board'][$key] = array(]]></add>
		</operation>
	</file>
	<file name="ADMINDIR/ManageMembers.controller.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.0.5
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.0.8
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[
			$search_params = array();
			if ($context['sub_action'] == 'query' && !empty($_REQUEST['params']) && empty($_POST['types']))
				$search_params = @unserialize(base64_decode($_REQUEST['params']));
			elseif (!empty($_POST))
			{
				$search_params['types'] = $_POST['types'];]]></search>
			<add><![CDATA[
			$search_params = array();
			if ($context['sub_action'] == 'query' && !empty($_REQUEST['params']) && empty($_POST['types']))
				$search_params = @json_decode(base64_decode($_REQUEST['params']), true);
			elseif (!empty($_POST))
			{
				$search_params['types'] = $_POST['types'];]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[						$search_params[$param_name] = $_POST[$param_name];
			}

			$search_url_params = isset($search_params) ? base64_encode(serialize($search_params)) : null;

			// @todo Validate a little more.
			// Loop through every field of the form.]]></search>
			<add><![CDATA[						$search_params[$param_name] = $_POST[$param_name];
			}

			$search_url_params = isset($search_params) ? base64_encode(json_encode($search_params)) : null;

			// @todo Validate a little more.
			// Loop through every field of the form.]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[						),
					),
					'sort' => array(
						'default' => 'INET_ATON(member_ip)',
						'reverse' => 'INET_ATON(member_ip) DESC',
					),
				),
				'last_active' => array(]]></search>
			<add><![CDATA[						),
					),
					'sort' => array(
						'default' => 'member_ip',
						'reverse' => 'member_ip DESC',
					),
				),
				'last_active' => array(]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[						),
					),
					'sort' => array(
						'default' => 'INET_ATON(member_ip)',
						'reverse' => 'INET_ATON(member_ip) DESC',
					),
				),
				'hostname' => array(]]></search>
			<add><![CDATA[						),
					),
					'sort' => array(
						'default' => 'member_ip',
						'reverse' => 'member_ip DESC',
					),
				),
				'hostname' => array(]]></add>
		</operation>
	</file>
	<file name="ADMINDIR/ManagePaid.controller.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.0
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.0.8
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			$context['pending_payments'] = array();
			if (!empty($row['pending_details']))
			{
				$pending_details = @unserialize($row['pending_details']);
				foreach ($pending_details as $id => $pending)
				{
					// Only this type need be displayed.
					if ($pending[3] == 'payback')
					{
						// Work out what the options were.
						$costs = @unserialize($context['current_subscription']['real_cost']);

						if ($context['current_subscription']['real_length'] == 'F')
						{]]></search>
			<add><![CDATA[			$context['pending_payments'] = array();
			if (!empty($row['pending_details']))
			{
				$pending_details = Util::unserialize($row['pending_details']);
				foreach ($pending_details as $id => $pending)
				{
					// Only this type need be displayed.
					if ($pending[3] == 'payback')
					{
						// Work out what the options were.
						$costs = Util::unserialize($context['current_subscription']['real_cost']);

						if ($context['current_subscription']['real_length'] == 'F')
						{]]></add>
		</operation>
	</file>
	<file name="ADMINDIR/ManageSearch.controller.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.0.2
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.0.8
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[
		$context['search_engines'] = array();
		if (!empty($modSettings['additional_search_engines']))
			$context['search_engines'] = unserialize($modSettings['additional_search_engines']);

		for ($count = 0; $count < 3; $count++)
			$context['search_engines'][] = array(]]></search>
			<add><![CDATA[
		$context['search_engines'] = array();
		if (!empty($modSettings['additional_search_engines']))
			$context['search_engines'] = Util::unserialize($modSettings['additional_search_engines']);

		for ($count = 0; $count < 3; $count++)
			$context['search_engines'][] = array(]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		// Resume building an index that was not completed
		if (isset($_REQUEST['resume']) && !empty($modSettings['search_custom_index_resume']))
		{
			$context['index_settings'] = unserialize($modSettings['search_custom_index_resume']);
			$context['start'] = (int) $context['index_settings']['resume_at'];
			unset($context['index_settings']['resume_at']);
			$context['step'] = 1;]]></search>
			<add><![CDATA[		// Resume building an index that was not completed
		if (isset($_REQUEST['resume']) && !empty($modSettings['search_custom_index_resume']))
		{
			$context['index_settings'] = Util::unserialize($modSettings['search_custom_index_resume']);
			$context['start'] = (int) $context['index_settings']['resume_at'];
			unset($context['index_settings']['resume_at']);
			$context['step'] = 1;]]></add>
		</operation>
	</file>
	<file name="ADMINDIR/ManageSecurity.controller.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.0.4
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.0.8
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			$context[$list . '_desc'] = array();

			if (!empty($modSettings[$list]))
				$context[$list] = unserialize($modSettings[$list]);

			if (!empty($modSettings[$list . '_desc']))
				$context[$list . '_desc'] = unserialize($modSettings[$list . '_desc']);
		}

		$config_vars = $this->_bbSettings->settings();]]></search>
			<add><![CDATA[			$context[$list . '_desc'] = array();

			if (!empty($modSettings[$list]))
				$context[$list] = Util::unserialize($modSettings[$list]);

			if (!empty($modSettings[$list . '_desc']))
				$context[$list . '_desc'] = Util::unserialize($modSettings[$list . '_desc']);
		}

		$config_vars = $this->_bbSettings->settings();]]></add>
		</operation>
	</file>
	<file name="ADMINDIR/ManageThemes.controller.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.0.4
 *
 *
 * @todo Update this for the new package manager?]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.0.8
 *
 *
 * @todo Update this for the new package manager?]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[				}

				if (!empty($theme_info_xml['extra']))
					$install_info += unserialize($theme_info_xml['extra']);
			}

			if (isset($install_info['based_on']))]]></search>
			<add><![CDATA[				}

				if (!empty($theme_info_xml['extra']))
					$install_info += Util::unserialize($theme_info_xml['extra']);
			}

			if (isset($install_info['based_on']))]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		// If this is the admin preferences the passed value will just be an element of it.
		if ($_GET['var'] == 'admin_preferences')
		{
			$options['admin_preferences'] = !empty($options['admin_preferences']) ? unserialize($options['admin_preferences']) : array();

			// New thingy...
			if (isset($_GET['admin_key']) && strlen($_GET['admin_key']) < 5)
				$options['admin_preferences'][$_GET['admin_key']] = $_GET['val'];

			// Change the value to be something nice,
			$_GET['val'] = serialize($options['admin_preferences']);
		}
		// If this is the window min/max settings, the passed window name will just be an element of it.
		elseif ($_GET['var'] == 'minmax_preferences')
		{
			$options['minmax_preferences'] = !empty($options['minmax_preferences']) ? unserialize($options['minmax_preferences']) : array();

			// New value for them
			if (isset($_GET['minmax_key']) && strlen($_GET['minmax_key']) < 10)
				$options['minmax_preferences'][$_GET['minmax_key']] = $_GET['val'];

			// Change the value to be something nice,
			$_GET['val'] = serialize($options['minmax_preferences']);
		}

		// Update the option.]]></search>
			<add><![CDATA[		// If this is the admin preferences the passed value will just be an element of it.
		if ($_GET['var'] == 'admin_preferences')
		{
			if (!empty($options['admin_preferences']))
			{
				$options['admin_preferences'] = serializeToJson($options['admin_preferences'], function($array_form) {
					global $context;

					$context['admin_preferences'] = $array_form;
					require_once(SUBSDIR . '/Admin.subs.php');
					updateAdminPreferences();
				});
			}
			else
			{
				$options['admin_preferences'] = array();
			}

			// New thingy...
			if (isset($_GET['admin_key']) && strlen($_GET['admin_key']) < 5)
				$options['admin_preferences'][$_GET['admin_key']] = $_GET['val'];

			// Change the value to be something nice,
			$_GET['val'] = json_encode($options['admin_preferences']);
		}
		// If this is the window min/max settings, the passed window name will just be an element of it.
		elseif ($_GET['var'] == 'minmax_preferences')
		{
			if (!empty($options['minmax_preferences']))
			{
				$minmax_preferences = serializeToJson($options['minmax_preferences'], function($array_form) {
					global $settings, $user_info;

					// Update the option.
					require_once(SUBSDIR . '/Themes.subs.php');
					updateThemeOptions(array($settings['theme_id'], $user_info['id'], 'minmax_preferences', json_encode($array_form)));
				});
			}
			else
			{
				$minmax_preferences = array();
			}

			// New value for them
			if (isset($_GET['minmax_key']) && strlen($_GET['minmax_key']) < 10)
				$minmax_preferences[$_GET['minmax_key']] = $_GET['val'];

			// Change the value to be something nice,
			$_GET['val'] = json_encode($minmax_preferences);
		}

		// Update the option.]]></add>
		</operation>
	</file>
	<file name="ADMINDIR/Modlog.controller.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.0
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.0.8
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		if (!empty($_REQUEST['params']) && empty($_REQUEST['is_search']))
		{
			$search_params = base64_decode(strtr($_REQUEST['params'], array(' ' => '+')));
			$search_params = @unserialize($search_params);
		}

		// This array houses all the valid quick search types.]]></search>
			<add><![CDATA[		if (!empty($_REQUEST['params']) && empty($_REQUEST['is_search']))
		{
			$search_params = base64_decode(strtr($_REQUEST['params'], array(' ' => '+')));
			$search_params = @json_decode($search_params, true);
		}

		// This array houses all the valid quick search types.]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		);

		// Setup the search context.
		$context['search_params'] = empty($search_params['string']) ? '' : base64_encode(serialize($search_params));
		$context['search'] = array(
			'string' => $search_params['string'],
			'type' => $search_params['type'],]]></search>
			<add><![CDATA[		);

		// Setup the search context.
		$context['search_params'] = empty($search_params['string']) ? '' : base64_encode(json_encode($search_params));
		$context['search'] = array(
			'string' => $search_params['string'],
			'type' => $search_params['type'],]]></add>
		</operation>
	</file>
	<file name="ADMINDIR/Packages.controller.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.0.5
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.0.8
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[									'type' => $txt['package_delete'] . ' ' . ($action_data['type'] == 'require-dir' ? $txt['package_tree'] : $txt['package_file']),
									'action' => strtr($real_path, array('\\' => '/', BOARDDIR => '.')),
									'description' => '',
									'value' => base64_encode(serialize(array('type' => $action_data['type'], 'orig' => $action_data['filename'], 'future' => $real_path, 'id' => $id))),
									'not_mod' => true,
								);
							else]]></search>
			<add><![CDATA[									'type' => $txt['package_delete'] . ' ' . ($action_data['type'] == 'require-dir' ? $txt['package_tree'] : $txt['package_file']),
									'action' => strtr($real_path, array('\\' => '/', BOARDDIR => '.')),
									'description' => '',
									'value' => base64_encode(json_encode(array('type' => $action_data['type'], 'orig' => $action_data['filename'], 'future' => $real_path, 'id' => $id))),
									'not_mod' => true,
								);
							else]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[									'type' => $txt['package_extract'] . ' ' . ($action_data['type'] == 'require-dir' ? $txt['package_tree'] : $txt['package_file']),
									'action' => strtr($real_path, array('\\' => '/', BOARDDIR => '.')),
									'description' => '',
									'value' => base64_encode(serialize(array('type' => $action_data['type'], 'orig' => $action_data['destination'], 'future' => $real_path, 'id' => $id))),
									'not_mod' => true,
								);
						}]]></search>
			<add><![CDATA[									'type' => $txt['package_extract'] . ' ' . ($action_data['type'] == 'require-dir' ? $txt['package_tree'] : $txt['package_file']),
									'action' => strtr($real_path, array('\\' => '/', BOARDDIR => '.')),
									'description' => '',
									'value' => base64_encode(json_encode(array('type' => $action_data['type'], 'orig' => $action_data['destination'], 'future' => $real_path, 'id' => $id))),
									'not_mod' => true,
								);
						}]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			{
				if (empty($change))
					continue;
				$theme_data = unserialize(base64_decode($change));
				if (empty($theme_data['type']))
					continue;
]]></search>
			<add><![CDATA[			{
				if (empty($change))
					continue;
				$theme_data = json_decode(base64_decode($change), true);
				if (empty($theme_data['type']))
					continue;
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			unset($context['file_tree'][strtr(BOARDDIR, array('\\' => '/'))]['contents']['attachments']);

			if (!is_array($modSettings['attachmentUploadDir']))
				$modSettings['attachmentUploadDir'] = unserialize($modSettings['attachmentUploadDir']);

			// @todo Should we suggest non-current directories be read only?
			foreach ($modSettings['attachmentUploadDir'] as $dir)]]></search>
			<add><![CDATA[			unset($context['file_tree'][strtr(BOARDDIR, array('\\' => '/'))]['contents']['attachments']);

			if (!is_array($modSettings['attachmentUploadDir']))
				$modSettings['attachmentUploadDir'] = Util::unserialize($modSettings['attachmentUploadDir']);

			// @todo Should we suggest non-current directories be read only?
			foreach ($modSettings['attachmentUploadDir'] as $dir)]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		// Have we got a load of back-catalogue trees to expand from a submit etc?
		if (!empty($_GET['back_look']))
		{
			$potententialTrees = unserialize(base64_decode($_GET['back_look']));
			foreach ($potententialTrees as $tree)
				$context['look_for'][] = $tree;
		}]]></search>
			<add><![CDATA[		// Have we got a load of back-catalogue trees to expand from a submit etc?
		if (!empty($_GET['back_look']))
		{
			$potententialTrees = json_decode(base64_decode($_GET['back_look']), true);
			foreach ($potententialTrees as $tree)
				$context['look_for'][] = $tree;
		}]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		if (!empty($_POST['back_look']))
			$context['only_find'] = array_merge($context['only_find'], $_POST['back_look']);

		$context['back_look_data'] = base64_encode(serialize(array_slice($context['look_for'], 0, 15)));

		// Are we finding more files than first thought?
		$context['file_offset'] = !empty($_REQUEST['fileoffset']) ? (int) $_REQUEST['fileoffset'] : 0;]]></search>
			<add><![CDATA[		if (!empty($_POST['back_look']))
			$context['only_find'] = array_merge($context['only_find'], $_POST['back_look']);

		$context['back_look_data'] = base64_encode(json_encode(array_slice($context['look_for'], 0, 15)));

		// Are we finding more files than first thought?
		$context['file_offset'] = !empty($_REQUEST['fileoffset']) ? (int) $_REQUEST['fileoffset'] : 0;]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[
			// Continuing?
			if (isset($_POST['toProcess']))
				$_POST['permStatus'] = unserialize(base64_decode($_POST['toProcess']));

			if (isset($_POST['permStatus']))
			{]]></search>
			<add><![CDATA[
			// Continuing?
			if (isset($_POST['toProcess']))
				$_POST['permStatus'] = json_decode(base64_decode($_POST['toProcess']), true);

			if (isset($_POST['permStatus']))
			{]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[
				// Nothing to do?
				if (empty($context['to_process']))
					redirectexit('action=admin;area=packages;sa=perms' . (!empty($context['back_look_data']) ? ';back_look=' . base64_encode(serialize($context['back_look_data'])) : '') . ';' . $context['session_var'] . '=' . $context['session_id']);
			}
			// Should never get here,
			else]]></search>
			<add><![CDATA[
				// Nothing to do?
				if (empty($context['to_process']))
					redirectexit('action=admin;area=packages;sa=perms' . (!empty($context['back_look_data']) ? ';back_look=' . base64_encode(json_encode($context['back_look_data'])) : '') . ';' . $context['session_var'] . '=' . $context['session_id']);
			}
			// Should never get here,
			else]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		{
			$context['predefined_type'] = isset($_POST['predefined']) ? $_POST['predefined'] : 'restricted';
			$context['total_items'] = isset($_POST['totalItems']) ? (int) $_POST['totalItems'] : 0;
			$context['directory_list'] = isset($_POST['dirList']) ? unserialize(base64_decode($_POST['dirList'])) : array();
			$context['file_offset'] = isset($_POST['fileOffset']) ? (int) $_POST['fileOffset'] : 0;

			// Haven't counted the items yet?]]></search>
			<add><![CDATA[		{
			$context['predefined_type'] = isset($_POST['predefined']) ? $_POST['predefined'] : 'restricted';
			$context['total_items'] = isset($_POST['totalItems']) ? (int) $_POST['totalItems'] : 0;
			$context['directory_list'] = isset($_POST['dirList']) ? json_decode(base64_decode($_POST['dirList']), true) : array();
			$context['file_offset'] = isset($_POST['fileOffset']) ? (int) $_POST['fileOffset'] : 0;

			// Haven't counted the items yet?]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			elseif ($context['predefined_type'] === 'free')
				$context['special_files'] = array();
			else
				$context['special_files'] = unserialize(base64_decode($_POST['specialFiles']));

			// Now we definitely know where we are, we need to go through again doing the chmod!
			foreach ($context['directory_list'] as $path => $dummy)]]></search>
			<add><![CDATA[			elseif ($context['predefined_type'] === 'free')
				$context['special_files'] = array();
			else
				$context['special_files'] = json_decode(base64_decode($_POST['specialFiles']), true);

			// Now we definitely know where we are, we need to go through again doing the chmod!
			foreach ($context['directory_list'] as $path => $dummy)]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		}

		// If we're here we are done!
		redirectexit('action=admin;area=packages;sa=perms' . (!empty($context['back_look_data']) ? ';back_look=' . base64_encode(serialize($context['back_look_data'])) : '') . ';' . $context['session_var'] . '=' . $context['session_id']);
	}

	/**]]></search>
			<add><![CDATA[		}

		// If we're here we are done!
		redirectexit('action=admin;area=packages;sa=perms' . (!empty($context['back_look_data']) ? ';back_look=' . base64_encode(json_decode($context['back_look_data'], true)) : '') . ';' . $context['session_var'] . '=' . $context['session_id']);
	}

	/**]]></add>
		</operation>
	</file>
	<file name="CONTROLLERDIR/Draft.controller.php">
		<operation>
			<search position="replace"><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.0
 *
 */
]]></search>
			<add><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.0.8
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[				'to' => array(),
				'bcc' => array(),
			);
			$recipient_ids = (!empty($row['to_list'])) ? unserialize($row['to_list']) : array();

			// Get nice names to show the user, the id's are not that great to see!
			if (!empty($recipient_ids['to']) || !empty($recipient_ids['bcc']))]]></search>
			<add><![CDATA[				'to' => array(),
				'bcc' => array(),
			);
			$recipient_ids = (!empty($row['to_list'])) ? Util::unserialize($row['to_list']) : array();

			// Get nice names to show the user, the id's are not that great to see!
			if (!empty($recipient_ids['to']) || !empty($recipient_ids['bcc']))]]></add>
		</operation>
	</file>
	<file name="CONTROLLERDIR/Emailpost.controller.php">
		<operation>
			<search position="replace"><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.0.3
 *
 */
]]></search>
			<add><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.0.8
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[
	// Validate they have permission to reply
	$becomesApproved = true;
	if (!in_array('postby_email', $pbe['user_info']['permissions']))
		return pbe_emailError('error_permission', $email_message);
	elseif ($topic_info['locked'] && !$pbe['user_info']['is_admin'] && !in_array('moderate_forum', $pbe['user_info']['permissions']))
		return pbe_emailError('error_locked', $email_message);]]></search>
			<add><![CDATA[
	// Validate they have permission to reply
	$becomesApproved = true;
	if (!in_array('postby_email', $pbe['user_info']['permissions']) && !$pbe['user_info']['is_admin'])
		return pbe_emailError('error_permission', $email_message);
	elseif ($topic_info['locked'] && !$pbe['user_info']['is_admin'] && !in_array('moderate_forum', $pbe['user_info']['permissions']))
		return pbe_emailError('error_locked', $email_message);]]></add>
		</operation>
	</file>
	<file name="CONTROLLERDIR/Memberlist.controller.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.0.7
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.0.8
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		{
			// Maybe there's something cached already.
			if (!empty($modSettings['memberlist_cache']))
				$memberlist_cache = @unserialize($modSettings['memberlist_cache']);

			// The chunk size for the cached index.
			$cache_step_size = 500;]]></search>
			<add><![CDATA[		{
			// Maybe there's something cached already.
			if (!empty($modSettings['memberlist_cache']))
				$memberlist_cache = Util::unserialize($modSettings['memberlist_cache']);

			// The chunk size for the cached index.
			$cache_step_size = 500;]]></add>
		</operation>
	</file>
	<file name="CONTROLLERDIR/Mentions.controller.php">
		<operation>
			<search position="replace"><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.0.4
 *
 */
]]></search>
			<add><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.0.8
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[				unset($mentions[$key]);

			if (!empty($modSettings['user_access_mentions']))
				$modSettings['user_access_mentions'] = @unserialize($modSettings['user_access_mentions']);
			else
				$modSettings['user_access_mentions'] = array();
]]></search>
			<add><![CDATA[				unset($mentions[$key]);

			if (!empty($modSettings['user_access_mentions']))
				$modSettings['user_access_mentions'] = Util::unserialize($modSettings['user_access_mentions']);
			else
				$modSettings['user_access_mentions'] = array();
]]></add>
		</operation>
	</file>
	<file name="CONTROLLERDIR/ModerationCenter.controller.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.0
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.0.8
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		loadLanguage('ModerationCenter');
		loadTemplate(false, 'admin');

		$context['admin_preferences'] = !empty($options['admin_preferences']) ? unserialize($options['admin_preferences']) : array();
		$context['robot_no_index'] = true;

		// Moderation counts for things that this moderator can take care of]]></search>
			<add><![CDATA[		loadLanguage('ModerationCenter');
		loadTemplate(false, 'admin');

		if (!empty($options['admin_preferences']))
		{
			$context['admin_preferences'] = serializeToJson($options['admin_preferences'], function($array_form) {
				global $context;

				$context['admin_preferences'] = $array_form;
				require_once(SUBSDIR . '/Admin.subs.php');
				updateAdminPreferences();
			});
		}
		else
		{
			$context['admin_preferences'] = array();
		}

		$context['robot_no_index'] = true;

		// Moderation counts for things that this moderator can take care of]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		if (!empty($_REQUEST['params']) && empty($_REQUEST['is_search']))
		{
			$search_params = base64_decode(strtr($_REQUEST['params'], array(' ' => '+')));
			$search_params = @unserialize($search_params);
		}

		// This array houses all the valid search types.]]></search>
			<add><![CDATA[		if (!empty($_REQUEST['params']) && empty($_REQUEST['is_search']))
		{
			$search_params = base64_decode(strtr($_REQUEST['params'], array(' ' => '+')));
			$search_params = @json_decode($search_params);
		}

		// This array houses all the valid search types.]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		);

		// Setup the search context.
		$context['search_params'] = empty($search_params['string']) ? '' : base64_encode(serialize($search_params));
		$context['search'] = array(
			'string' => $search_params['string'],
			'type' => $search_params['type'],]]></search>
			<add><![CDATA[		);

		// Setup the search context.
		$context['search_params'] = empty($search_params['string']) ? '' : base64_encode(json_encode($search_params));
		$context['search'] = array(
			'string' => $search_params['string'],
			'type' => $search_params['type'],]]></add>
		</operation>
	</file>
	<file name="CONTROLLERDIR/OpenID.controller.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2012 Simple Machines Forum contributors (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.0
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2012 Simple Machines Forum contributors (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.0.8
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			fatal_lang_error('openid_load_data');

		// Any save fields to restore?
		$context['openid_save_fields'] = isset($_GET['sf']) ? unserialize(base64_decode($_GET['sf'])) : array();
		$context['openid_claimed_id'] = $_GET['openid_claimed_id'];

		// Is there a user with this OpenID_uri?]]></search>
			<add><![CDATA[			fatal_lang_error('openid_load_data');

		// Any save fields to restore?
		$context['openid_save_fields'] = isset($_GET['sf']) ? json_decode(base64_decode($_GET['sf']), true) : array();
		$context['openid_claimed_id'] = $_GET['openid_claimed_id'];

		// Is there a user with this OpenID_uri?]]></add>
		</operation>
	</file>
	<file name="CONTROLLERDIR/ProfileHistory.controller.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.0
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.0.8
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[						),
					),
					'sort' => array(
						'default' => 'INET_ATON(m.poster_ip)',
						'reverse' => 'INET_ATON(m.poster_ip) DESC',
					),
				),
				'poster' => array(]]></search>
			<add><![CDATA[						),
					),
					'sort' => array(
						'default' => 'm.poster_ip',
						'reverse' => 'm.poster_ip DESC',
					),
				),
				'poster' => array(]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[						),
					),
					'sort' => array(
						'default' => 'INET_ATON(le.ip)',
						'reverse' => 'INET_ATON(le.ip) DESC',
					),
				),
				'display_name' => array(]]></search>
			<add><![CDATA[						),
					),
					'sort' => array(
						'default' => 'le.ip',
						'reverse' => 'le.ip DESC',
					),
				),
				'display_name' => array(]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		$members = array();
		while ($row = $db->fetch_assoc($request))
		{
			$extra = @unserialize($row['extra']);
			if (!empty($extra['applicator']))
				$members[] = $extra['applicator'];
]]></search>
			<add><![CDATA[		$members = array();
		while ($row = $db->fetch_assoc($request))
		{
			$extra = Util::unserialize($row['extra']);
			if (!empty($extra['applicator']))
				$members[] = $extra['applicator'];
]]></add>
		</operation>
	</file>
	<file name="CONTROLLERDIR/ProfileSubscriptions.controller.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.0
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.0.8
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		foreach ($context['subscriptions'] as $id => $sub)
		{
			// Work out the costs.
			$costs = @unserialize($sub['real_cost']);

			$cost_array = array();
]]></search>
			<add><![CDATA[		foreach ($context['subscriptions'] as $id => $sub)
		{
			// Work out the costs.
			$costs = Util::unserialize($sub['real_cost']);

			$cost_array = array();
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			// What are the details like?
			$current_pending = array();
			if ($context['current'][$order['id']]['pending_details'] != '')
				$current_pending = @unserialize($context['current'][$order['id']]['pending_details']);

			// Don't get silly.
			if (count($current_pending) > 9)]]></search>
			<add><![CDATA[			// What are the details like?
			$current_pending = array();
			if ($context['current'][$order['id']]['pending_details'] != '')
				$current_pending = Util::unserialize($context['current'][$order['id']]['pending_details']);

			// Don't get silly.
			if (count($current_pending) > 9)]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		if (isset($context['current'][$sub_id]))
		{
			// What are the pending details?
			$current_pending = @unserialize($context['current'][$sub_id]['pending_details']);

			// Nothing pending, nothing to do
			if (!empty($current_pending))]]></search>
			<add><![CDATA[		if (isset($context['current'][$sub_id]))
		{
			// What are the pending details?
			$current_pending = Util::unserialize($context['current'][$sub_id]['pending_details']);

			// Nothing pending, nothing to do
			if (!empty($current_pending))]]></add>
		</operation>
	</file>
	<file name="CONTROLLERDIR/Suggest.controller.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.0
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.0.8
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		loadTemplate('Xml');

		// Any parameters?
		$context['search_param'] = isset($_REQUEST['search_param']) ? unserialize(base64_decode($_REQUEST['search_param'])) : array();

		if (isset($_REQUEST['suggest_type'], $_REQUEST['search']) && isset($searchTypes[$_REQUEST['suggest_type']]))
		{]]></search>
			<add><![CDATA[		loadTemplate('Xml');

		// Any parameters?
		$context['search_param'] = isset($_REQUEST['search_param']) ? json_decode(base64_decode($_REQUEST['search_param']), true) : array();

		if (isset($_REQUEST['suggest_type'], $_REQUEST['search']) && isset($searchTypes[$_REQUEST['suggest_type']]))
		{]]></add>
		</operation>
	</file>
	<file name="CONTROLLERDIR/Who.controller.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.0
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.0.8
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[
		foreach ($members as $row)
		{
			$actions = @unserialize($row['url']);
			if ($actions === false)
				continue;
]]></search>
			<add><![CDATA[
		foreach ($members as $row)
		{
			$actions = Util::unserialize($row['url']);
			if ($actions === false)
				continue;
]]></add>
		</operation>
	</file>
	<file name="SUBSDIR/Admin.subs.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.0.7
 *
 * This file contains functions that are specifically done by administrators.
 *]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.0.8
 *
 * This file contains functions that are specifically done by administrators.
 *]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		return false;

	// This is what we'll be saving.
	$options['admin_preferences'] = serialize($context['admin_preferences']);

	require_once(SUBSDIR . '/Themes.subs.php');
]]></search>
			<add><![CDATA[		return false;

	// This is what we'll be saving.
	$options['admin_preferences'] = json_encode($context['admin_preferences']);

	require_once(SUBSDIR . '/Themes.subs.php');
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[
	if (!$value)
	{
		$db->query('', '
			UPDATE {db_prefix}custom_fields
			SET active = 0'
		);
	}
}

/**]]></search>
			<add><![CDATA[
	if (!$value)
	{
		// Disable all fields. Wouldn't want any to show when the feature is disabled.
		$db->query('', '
			UPDATE {db_prefix}custom_fields
			SET active = 0'
		);
	}
	else
	{
		// Set the display cache for the custom profile fields.
		require_once(SUBSDIR . '/ManageFeatures.subs.php');
		updateDisplayCache();
	}
}

/**]]></add>
		</operation>
	</file>
	<file name="SUBSDIR/Attachments.subs.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.0
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.0.8
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	if (!empty($modSettings['attachment_basedirectories']) && !empty($modSettings['use_subdirectories_for_attachments']))
	{
		if (!is_array($modSettings['attachment_basedirectories']))
			$modSettings['attachment_basedirectories'] = unserialize($modSettings['attachment_basedirectories']);

		$base_dir = array_search($modSettings['basedirectory_for_attachments'], $modSettings['attachment_basedirectories']);
	}]]></search>
			<add><![CDATA[	if (!empty($modSettings['attachment_basedirectories']) && !empty($modSettings['use_subdirectories_for_attachments']))
	{
		if (!is_array($modSettings['attachment_basedirectories']))
			$modSettings['attachment_basedirectories'] = Util::unserialize($modSettings['attachment_basedirectories']);

		$base_dir = array_search($modSettings['basedirectory_for_attachments'], $modSettings['attachment_basedirectories']);
	}]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		if (!isset($modSettings['last_attachments_directory']))
			$modSettings['last_attachments_directory'] = array();
		if (!is_array($modSettings['last_attachments_directory']))
			$modSettings['last_attachments_directory'] = unserialize($modSettings['last_attachments_directory']);
		if (!isset($modSettings['last_attachments_directory'][$base_dir]))
			$modSettings['last_attachments_directory'][$base_dir] = 0;
	}]]></search>
			<add><![CDATA[		if (!isset($modSettings['last_attachments_directory']))
			$modSettings['last_attachments_directory'] = array();
		if (!is_array($modSettings['last_attachments_directory']))
			$modSettings['last_attachments_directory'] = Util::unserialize($modSettings['last_attachments_directory']);
		if (!isset($modSettings['last_attachments_directory'][$base_dir]))
			$modSettings['last_attachments_directory'][$base_dir] = 0;
	}]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	}

	if (!is_array($modSettings['attachmentUploadDir']))
		$modSettings['attachmentUploadDir'] = unserialize($modSettings['attachmentUploadDir']);

	if (!in_array($updir, $modSettings['attachmentUploadDir']) && !empty($updir))
		$outputCreation = automanage_attachments_create_directory($updir);]]></search>
			<add><![CDATA[	}

	if (!is_array($modSettings['attachmentUploadDir']))
		$modSettings['attachmentUploadDir'] = Util::unserialize($modSettings['attachmentUploadDir']);

	if (!in_array($updir, $modSettings['attachmentUploadDir']) && !empty($updir))
		$outputCreation = automanage_attachments_create_directory($updir);]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			'attachmentUploadDir' => serialize($modSettings['attachmentUploadDir']),
			'currentAttachmentUploadDir' => $modSettings['currentAttachmentUploadDir'],
		), true);
		$modSettings['attachmentUploadDir'] = unserialize($modSettings['attachmentUploadDir']);
	}

	$context['attach_dir'] = $modSettings['attachmentUploadDir'][$modSettings['currentAttachmentUploadDir']];]]></search>
			<add><![CDATA[			'attachmentUploadDir' => serialize($modSettings['attachmentUploadDir']),
			'currentAttachmentUploadDir' => $modSettings['currentAttachmentUploadDir'],
		), true);
		$modSettings['attachmentUploadDir'] = Util::unserialize($modSettings['attachmentUploadDir']);
	}

	$context['attach_dir'] = $modSettings['attachmentUploadDir'][$modSettings['currentAttachmentUploadDir']];]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			'last_attachments_directory' => serialize($modSettings['last_attachments_directory']),
			'currentAttachmentUploadDir' => $modSettings['currentAttachmentUploadDir'],
		));
		$modSettings['last_attachments_directory'] = unserialize($modSettings['last_attachments_directory']);

		return true;
	}]]></search>
			<add><![CDATA[			'last_attachments_directory' => serialize($modSettings['last_attachments_directory']),
			'currentAttachmentUploadDir' => $modSettings['currentAttachmentUploadDir'],
		));
		$modSettings['last_attachments_directory'] = Util::unserialize($modSettings['last_attachments_directory']);

		return true;
	}]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		automanage_attachments_check_directory();

	if (!is_array($modSettings['attachmentUploadDir']))
		$modSettings['attachmentUploadDir'] = unserialize($modSettings['attachmentUploadDir']);

	$context['attach_dir'] = $modSettings['attachmentUploadDir'][$modSettings['currentAttachmentUploadDir']];
]]></search>
			<add><![CDATA[		automanage_attachments_check_directory();

	if (!is_array($modSettings['attachmentUploadDir']))
	{
		$attachmentUploadDir = Util::unserialize($modSettings['attachmentUploadDir']);
		if (!empty($attachmentUploadDir))
		{
			$modSettings['attachmentUploadDir'] = $attachmentUploadDir;
		}
	}

	$context['attach_dir'] = $modSettings['attachmentUploadDir'][$modSettings['currentAttachmentUploadDir']];
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	if (empty($modSettings['attachmentUploadDir']))
		$attachmentDir = BOARDDIR . '/attachments';
	elseif (!empty($modSettings['currentAttachmentUploadDir']) && !is_array($modSettings['attachmentUploadDir']) && (@unserialize($modSettings['attachmentUploadDir']) !== false))
		$attachmentDir = unserialize($modSettings['attachmentUploadDir']);
	else
		$attachmentDir = $modSettings['attachmentUploadDir'];
]]></search>
			<add><![CDATA[	if (empty($modSettings['attachmentUploadDir']))
		$attachmentDir = BOARDDIR . '/attachments';
	elseif (!empty($modSettings['currentAttachmentUploadDir']) && !is_array($modSettings['attachmentUploadDir']) && (@unserialize($modSettings['attachmentUploadDir']) !== false))
	{
		// @todo this is here to prevent the package manager to die when complete the installation of the patch (the new Util class has not yet been loaded so we need the normal one)
		if (function_exists('Util::unserialize'))
		{
			$attachmentDir = Util::unserialize($modSettings['attachmentUploadDir']);
		}
		else
		{
			$attachmentDir = unserialize($modSettings['attachmentUploadDir']);
		}
	}
	else
		$attachmentDir = $modSettings['attachmentUploadDir'];
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	if (!empty($modSettings['currentAttachmentUploadDir']))
	{
		if (!is_array($modSettings['attachmentUploadDir']))
			$modSettings['attachmentUploadDir'] = unserialize($modSettings['attachmentUploadDir']);
		$path = $modSettings['attachmentUploadDir'][$dir];
	}
	else]]></search>
			<add><![CDATA[	if (!empty($modSettings['currentAttachmentUploadDir']))
	{
		if (!is_array($modSettings['attachmentUploadDir']))
			$modSettings['attachmentUploadDir'] = Util::unserialize($modSettings['attachmentUploadDir']);
		$path = $modSettings['attachmentUploadDir'][$dir];
	}
	else]]></add>
		</operation>
	</file>
	<file name="SUBSDIR/Auth.subs.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.0.3
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.0.8
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[
	// The cookie may already exist, and have been set with different options.
	$cookie_state = (empty($modSettings['localCookies']) ? 0 : 1) | (empty($modSettings['globalCookies']) ? 0 : 2);
	if (isset($_COOKIE[$cookiename]) && preg_match('~^a:[34]:\{i:0;i:\d{1,8};i:1;s:(0|40):"([a-fA-F0-9]{40})?";i:2;[id]:\d{1,14};(i:3;i:\d;)?\}$~', $_COOKIE[$cookiename]) === 1)
	{
		$array = @unserialize($_COOKIE[$cookiename]);

		// Out with the old, in with the new!
		if (isset($array[3]) && $array[3] != $cookie_state)
		{
			$cookie_url = url_parts($array[3] & 1 > 0, $array[3] & 2 > 0);
			elk_setcookie($cookiename, serialize(array(0, '', 0)), time() - 3600, $cookie_url[1], $cookie_url[0]);
		}
	}

	// Get the data and path to set it on.
	$data = serialize(empty($id) ? array(0, '', 0) : array($id, $password, time() + $cookie_length, $cookie_state));
	$cookie_url = url_parts(!empty($modSettings['localCookies']), !empty($modSettings['globalCookies']));

	// Set the cookie, $_COOKIE, and session variable.]]></search>
			<add><![CDATA[
	// The cookie may already exist, and have been set with different options.
	$cookie_state = (empty($modSettings['localCookies']) ? 0 : 1) | (empty($modSettings['globalCookies']) ? 0 : 2);

	if (isset($_COOKIE[$cookiename]))
	{
		$array = serializeToJson($_COOKIE[$cookiename], function ($array_from) use ($cookiename) {
			global $modSettings;

			require_once(SUBSDIR . '/Auth.subs.php');
			$_COOKIE[$cookiename] = json_encode($array_from);
			setLoginCookie(60 * $modSettings['cookieTime'], $array_from[0], $array_from[1]);
		});

		// Out with the old, in with the new!
		if (isset($array[3]) && $array[3] != $cookie_state)
		{
			$cookie_url = url_parts($array[3] & 1 > 0, $array[3] & 2 > 0);
			elk_setcookie($cookiename, json_encode(array(0, '', 0)), time() - 3600, $cookie_url[1], $cookie_url[0]);
		}
	}

	// Get the data and path to set it on.
	$data = json_encode(empty($id) ? array(0, '', 0) : array($id, $password, time() + $cookie_length, $cookie_state));
	$cookie_url = url_parts(!empty($modSettings['localCookies']), !empty($modSettings['globalCookies']));

	// Set the cookie, $_COOKIE, and session variable.]]></add>
		</operation>
	</file>
	<file name="SUBSDIR/Cache.subs.php">
		<operation>
			<search position="replace" regexp="true"><![CDATA[ \* @version 1\.0\.\d]]></search>
			<add><![CDATA[ * @version 1.0.8]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	if (function_exists('call_integration_hook') && isset($value))
		call_integration_hook('cache_get_data', array($key, $ttl, $value));

	return empty($value) ? null : @unserialize($value);
}

/**]]></search>
			<add><![CDATA[	if (function_exists('call_integration_hook') && isset($value))
		call_integration_hook('cache_get_data', array($key, $ttl, $value));

	return empty($value) ? null : Util::unserialize($value);
}

/**]]></add>
		</operation>
	</file>
	<file name="SUBSDIR/Drafts.subs.php">
		<operation>
			<search position="replace"><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.0.5
 *
 */
]]></search>
			<add><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.0.8
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		$recipientList['bcc'] = isset($_POST['recipient_bcc']) ? explode(',', $_POST['recipient_bcc']) : array();
	}
	elseif (!empty($draft_info['to_list']) && empty($recipientList))
		$recipientList = unserialize($draft_info['to_list']);

	// Prepare the data
	$draft = array(]]></search>
			<add><![CDATA[		$recipientList['bcc'] = isset($_POST['recipient_bcc']) ? explode(',', $_POST['recipient_bcc']) : array();
	}
	elseif (!empty($draft_info['to_list']) && empty($recipientList))
		$recipientList = Util::unserialize($draft_info['to_list']);

	// Prepare the data
	$draft = array(]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			$_REQUEST['message'] = !empty($draft_info['body']) ? $draft_info['body'] : '';
			$_REQUEST['replied_to'] = !empty($draft_info['id_reply']) ? $draft_info['id_reply'] : 0;
			$context['id_pm_draft'] = !empty($draft_info['id_draft']) ? $draft_info['id_draft'] : 0;
			$recipients = unserialize($draft_info['to_list']);

			// Make sure we only have integers in this array
			$recipients['to'] = array_map('intval', $recipients['to']);]]></search>
			<add><![CDATA[			$_REQUEST['message'] = !empty($draft_info['body']) ? $draft_info['body'] : '';
			$_REQUEST['replied_to'] = !empty($draft_info['id_reply']) ? $draft_info['id_reply'] : 0;
			$context['id_pm_draft'] = !empty($draft_info['id_draft']) ? $draft_info['id_draft'] : 0;
			$recipients = Util::unserialize($draft_info['to_list']);

			// Make sure we only have integers in this array
			$recipients['to'] = array_map('intval', $recipients['to']);]]></add>
		</operation>
	</file>
	<file name="SUBSDIR/Emailpost.subs.php">
		<operation>
			<search position="replace"><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.0.3
 *
 */
]]></search>
			<add><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.0.8
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	if (!empty($modSettings['currentAttachmentUploadDir']))
	{
		if (!is_array($modSettings['attachmentUploadDir']))
			$modSettings['attachmentUploadDir'] = unserialize($modSettings['attachmentUploadDir']);

		// The current directory, of course!
		$current_attach_dir = $modSettings['attachmentUploadDir'][$modSettings['currentAttachmentUploadDir']];]]></search>
			<add><![CDATA[	if (!empty($modSettings['currentAttachmentUploadDir']))
	{
		if (!is_array($modSettings['attachmentUploadDir']))
			$modSettings['attachmentUploadDir'] = Util::unserialize($modSettings['attachmentUploadDir']);

		// The current directory, of course!
		$current_attach_dir = $modSettings['attachmentUploadDir'][$modSettings['currentAttachmentUploadDir']];]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	$board_number = 0;

	// Load our valid email ids and the corresponding board ids
	$data = (!empty($modSettings['maillist_receiving_address'])) ? unserialize($modSettings['maillist_receiving_address']) : array();
	foreach ($data as $key => $addr)
		$valid_address[$addr[0]] = $addr[1];
]]></search>
			<add><![CDATA[	$board_number = 0;

	// Load our valid email ids and the corresponding board ids
	$data = (!empty($modSettings['maillist_receiving_address'])) ? Util::unserialize($modSettings['maillist_receiving_address']) : array();
	foreach ($data as $key => $addr)
		$valid_address[$addr[0]] = $addr[1];
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	// Place the entry in to the online log so the who's online can use it
	$serialized = serialize($get_temp);
	$session_id = 'ip' . $pbe['profile']['member_ip'];
	$db->insert($do_delete ? 'ignore' : 'replace',
		'{db_prefix}log_online',
		array('session' => 'string', 'id_member' => 'int', 'id_spider' => 'int', 'log_time' => 'int', 'ip' => 'raw', 'url' => 'string'),
		array($session_id, $pbe['profile']['id_member'], 0, $last_login, 'IFNULL(INET_ATON(\'' . $pbe['profile']['member_ip'] . '\'), 0)', $serialized),
		array('session')
	);
}]]></search>
			<add><![CDATA[	// Place the entry in to the online log so the who's online can use it
	$serialized = serialize($get_temp);
	$session_id = 'ip' . $pbe['profile']['member_ip'];
	$member_ip = empty($pbe['profile']['member_ip']) ? 0 : $pbe['profile']['member_ip'];
	$db->insert($do_delete ? 'ignore' : 'replace',
		'{db_prefix}log_online',
		array('session' => 'string', 'id_member' => 'int', 'id_spider' => 'int', 'log_time' => 'int', 'ip' => 'string', 'url' => 'string'),
		array($session_id, $pbe['profile']['id_member'], 0, $last_login, $member_ip, $serialized),
		array('session')
	);
}]]></add>
		</operation>
	</file>
	<file name="SUBSDIR/ManageAttachments.subs.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.0
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.0.8
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	{
		// we have more directories
		if (!is_array($modSettings['attachmentUploadDir']))
			$modSettings['attachmentUploadDir'] = unserialize($modSettings['attachmentUploadDir']);

		return $modSettings['attachmentUploadDir'];
	}]]></search>
			<add><![CDATA[	{
		// we have more directories
		if (!is_array($modSettings['attachmentUploadDir']))
			$modSettings['attachmentUploadDir'] = Util::unserialize($modSettings['attachmentUploadDir']);

		return $modSettings['attachmentUploadDir'];
	}]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	global $modSettings;

	if (!empty($modSettings['currentAttachmentUploadDir']))
		$attach_dirs = unserialize($modSettings['attachmentUploadDir']);
	elseif (!empty($modSettings['attachmentUploadDir']))
		$attach_dirs = array($modSettings['attachmentUploadDir']);
	else]]></search>
			<add><![CDATA[	global $modSettings;

	if (!empty($modSettings['currentAttachmentUploadDir']))
		$attach_dirs = Util::unserialize($modSettings['attachmentUploadDir']);
	elseif (!empty($modSettings['attachmentUploadDir']))
		$attach_dirs = array($modSettings['attachmentUploadDir']);
	else]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[				$attachment_name = !empty($row['file_hash']) ? $row['id_attach'] . '_' . $row['file_hash'] . '.elk' : getLegacyAttachmentFilename($row['filename'], $row['id_attach'], null, true);

				if (!is_array($modSettings['attachmentUploadDir']))
					$modSettings['attachmentUploadDir'] = unserialize($modSettings['attachmentUploadDir']);

				// Loop through the other folders looking for this file
				foreach ($modSettings['attachmentUploadDir'] as $id => $dir)]]></search>
			<add><![CDATA[				$attachment_name = !empty($row['file_hash']) ? $row['id_attach'] . '_' . $row['file_hash'] . '.elk' : getLegacyAttachmentFilename($row['filename'], $row['id_attach'], null, true);

				if (!is_array($modSettings['attachmentUploadDir']))
					$modSettings['attachmentUploadDir'] = Util::unserialize($modSettings['attachmentUploadDir']);

				// Loop through the other folders looking for this file
				foreach ($modSettings['attachmentUploadDir'] as $id => $dir)]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[					$attachment_name = $row['id_attach'] . '_' . $row['file_hash'];

					if (!is_array($modSettings['attachmentUploadDir']))
						$modSettings['attachmentUploadDir'] = unserialize($modSettings['attachmentUploadDir']);

					// Loop through the other folders looking for this file
					foreach ($modSettings['attachmentUploadDir'] as $id => $dir)]]></search>
			<add><![CDATA[					$attachment_name = $row['id_attach'] . '_' . $row['file_hash'];

					if (!is_array($modSettings['attachmentUploadDir']))
						$modSettings['attachmentUploadDir'] = Util::unserialize($modSettings['attachmentUploadDir']);

					// Loop through the other folders looking for this file
					foreach ($modSettings['attachmentUploadDir'] as $id => $dir)]]></add>
		</operation>
	</file>
	<file name="SUBSDIR/Members.subs.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.0.7
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.0.8
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[
	$request = $db->query('', '
		SELECT
			lo.log_time, lo.id_member, lo.url, INET_NTOA(lo.ip) AS ip, mem.real_name,
			lo.session, mg.online_color, IFNULL(mem.show_online, 1) AS show_online,
			lo.id_spider
		FROM {db_prefix}log_online AS lo]]></search>
			<add><![CDATA[
	$request = $db->query('', '
		SELECT
			lo.log_time, lo.id_member, lo.url, lo.ip, mem.real_name,
			lo.session, mg.online_color, IFNULL(mem.show_online, 1) AS show_online,
			lo.id_spider
		FROM {db_prefix}log_online AS lo]]></add>
		</operation>
	</file>
	<file name="SUBSDIR/MembersOnline.subs.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.0
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.0.8
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	$spiders = array();
	$spider_finds = array();
	if (!empty($modSettings['show_spider_online']) && ($modSettings['show_spider_online'] < 3 || allowedTo('admin_forum')) && !empty($modSettings['spider_name_cache']))
		$spiders = unserialize($modSettings['spider_name_cache']);

	// Load the users online right now.
	$request = $db->query('', ']]></search>
			<add><![CDATA[	$spiders = array();
	$spider_finds = array();
	if (!empty($modSettings['show_spider_online']) && ($modSettings['show_spider_online'] < 3 || allowedTo('admin_forum')) && !empty($modSettings['spider_name_cache']))
		$spiders = Util::unserialize($modSettings['spider_name_cache']);

	// Load the users online right now.
	$request = $db->query('', ']]></add>
		</operation>
	</file>
	<file name="SUBSDIR/Mentions.subs.php">
		<operation>
			<search position="replace"><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.0.5
 *
 */
]]></search>
			<add><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.0.8
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		)
	);
	$status = $approved ? 0 : 3;
	while ($row = $db->fetch_row($request))
		updateMentionMenuCount($status, $row['id_member']);
	$db->free_result($request);
}]]></search>
			<add><![CDATA[		)
	);
	$status = $approved ? 0 : 3;
	while ($row = $db->fetch_assoc($request))
		updateMentionMenuCount($status, $row['id_member']);
	$db->free_result($request);
}]]></add>
		</operation>
	</file>
	<file name="SUBSDIR/Messages.subs.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.0.6
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.0.8
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[
		if (!empty($modSettings['search_custom_index_config']))
		{
			$customIndexSettings = unserialize($modSettings['search_custom_index_config']);
			$words = text2words($row['body'], $customIndexSettings['bytes_per_word'], true);
			if (!empty($words))
				$db->query('', ']]></search>
			<add><![CDATA[
		if (!empty($modSettings['search_custom_index_config']))
		{
			$customIndexSettings = Util::unserialize($modSettings['search_custom_index_config']);
			$words = text2words($row['body'], $customIndexSettings['bytes_per_word'], true);
			if (!empty($words))
				$db->query('', ']]></add>
		</operation>
	</file>
	<file name="SUBSDIR/Modlog.subs.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.0.2
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.0.8
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	$entries = array();
	while ($row = $db->fetch_assoc($result))
	{
		$row['extra'] = @unserialize($row['extra']);

		// Corrupt?
		$row['extra'] = is_array($row['extra']) ? $row['extra'] : array();]]></search>
			<add><![CDATA[	$entries = array();
	while ($row = $db->fetch_assoc($result))
	{
		$row['extra'] = Util::unserialize($row['extra']);

		// Corrupt?
		$row['extra'] = is_array($row['extra']) ? $row['extra'] : array();]]></add>
		</operation>
	</file>
	<file name="SUBSDIR/OpenID.subs.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.0
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.0.8
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			'openid.identity=' . $openid_identity,
			'openid.claimed_id=' . $openid_claimedid,
			'openid.assoc_handle=' . urlencode($assoc['handle']),
			'openid.return_to=' . urlencode($scripturl . '?action=openidreturn&sa=' . (!empty($return_action) ? $return_action : $_REQUEST['action']) . '&t=' . $request_time . (!empty($save_fields) ? '&sf=' . base64_encode(serialize($save_fields)) : '')),
			'openid.sreg.required=email',
		);
]]></search>
			<add><![CDATA[			'openid.identity=' . $openid_identity,
			'openid.claimed_id=' . $openid_claimedid,
			'openid.assoc_handle=' . urlencode($assoc['handle']),
			'openid.return_to=' . urlencode($scripturl . '?action=openidreturn&sa=' . (!empty($return_action) ? $return_action : $_REQUEST['action']) . '&t=' . $request_time . (!empty($save_fields) ? '&sf=' . base64_encode(json_encode($save_fields)) : '')),
			'openid.sreg.required=email',
		);
]]></add>
		</operation>
	</file>
	<file name="SUBSDIR/Package.subs.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.0.4
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.0.8
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		$result = array(
			'old_themes' => explode(',', $row['themes_installed']),
			'old_version' => $row['version'],
			'db_changes' => empty($row['db_changes']) ? array() : unserialize($row['db_changes']),
			'package_id' => $row['package_id'],
			'install_state' => $row['install_state'],
		);]]></search>
			<add><![CDATA[		$result = array(
			'old_themes' => explode(',', $row['themes_installed']),
			'old_version' => $row['version'],
			'db_changes' => empty($row['db_changes']) ? array() : Util::unserialize($row['db_changes']),
			'package_id' => $row['package_id'],
			'install_state' => $row['install_state'],
		);]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	global $modSettings;

	// Know addon servers
	$servers = @unserialize($modSettings['authorized_package_servers']);
	if (empty($servers))
		return false;
]]></search>
			<add><![CDATA[	global $modSettings;

	// Know addon servers
	$servers = Util::unserialize($modSettings['authorized_package_servers']);
	if (empty($servers))
		return false;
]]></add>
		</operation>
	</file>
	<file name="SUBSDIR/PaidSubscriptions.subs.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.0
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.0.8
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	while ($row = $db->fetch_assoc($request))
	{
		// Pick a cost.
		$costs = @unserialize($row['cost']);

		if ($row['length'] != 'F' && !empty($modSettings['paid_currency_symbol']) && !empty($costs['fixed']))
			$cost = sprintf($modSettings['paid_currency_symbol'], $costs['fixed']);]]></search>
			<add><![CDATA[	while ($row = $db->fetch_assoc($request))
	{
		// Pick a cost.
		$costs = Util::unserialize($row['cost']);

		if ($row['length'] != 'F' && !empty($modSettings['paid_currency_symbol']) && !empty($costs['fixed']))
			$cost = sprintf($modSettings['paid_currency_symbol'], $costs['fixed']);]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			'id' => $row['id_subscribe'],
			'name' => $row['name'],
			'desc' => $row['description'],
			'cost' => @unserialize($row['cost']),
			'span' => array(
				'value' => $span_value,
				'unit' => $span_unit,]]></search>
			<add><![CDATA[			'id' => $row['id_subscribe'],
			'name' => $row['name'],
			'desc' => $row['description'],
			'cost' => Util::unserialize($row['cost']),
			'span' => array(
				'value' => $span_value,
				'unit' => $span_unit,]]></add>
		</operation>
	</file>
	<file name="SUBSDIR/PersonalMessage.subs.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.0.6
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.0.8
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	// Check whether we have to apply anything...
	while ($row = $db->fetch_assoc($request))
	{
		$criteria = unserialize($row['criteria']);

		// Note we don't check the buddy status, cause deletion from buddy = madness!
		$delete = false;]]></search>
			<add><![CDATA[	// Check whether we have to apply anything...
	while ($row = $db->fetch_assoc($request))
	{
		$criteria = Util::unserialize($row['criteria']);

		// Note we don't check the buddy status, cause deletion from buddy = madness!
		$delete = false;]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		$context['rules'][$row['id_rule']] = array(
			'id' => $row['id_rule'],
			'name' => $row['rule_name'],
			'criteria' => unserialize($row['criteria']),
			'actions' => unserialize($row['actions']),
			'delete' => $row['delete_pm'],
			'logic' => $row['is_or'] ? 'or' : 'and',
		);]]></search>
			<add><![CDATA[		$context['rules'][$row['id_rule']] = array(
			'id' => $row['id_rule'],
			'name' => $row['rule_name'],
			'criteria' => Util::unserialize($row['criteria']),
			'actions' => Util::unserialize($row['actions']),
			'delete' => $row['delete_pm'],
			'logic' => $row['is_or'] ? 'or' : 'and',
		);]]></add>
		</operation>
	</file>
	<file name="SUBSDIR/Poll.subs.php">
		<operation>
			<search position="replace"><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.0
 *
 * This file contains functions for dealing with polls.
 *]]></search>
			<add><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.0.8
 *
 * This file contains functions for dealing with polls.
 *]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[ */
function modifyPoll($id_poll, $question, $max_votes = 1, $hide_results = 1, $expire = 0, $can_change_vote = 0, $can_guest_vote = 0)
{
	$expire = empty($expire) ? 0 : time() + $expire * 3600 * 24;

	$db = database();

	$db->query('', ']]></search>
			<add><![CDATA[ */
function modifyPoll($id_poll, $question, $max_votes = 1, $hide_results = 1, $expire = 0, $can_change_vote = 0, $can_guest_vote = 0)
{
	$db = database();

	$db->query('', ']]></add>
		</operation>
	</file>
	<file name="SUBSDIR/ScheduledTask.class.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.0.5
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.0.8
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		);
		while ($row = $db->fetch_assoc($request))
		{
			require_once(ADMINDIR . '/ManagePaid.controller.php');
			removeSubscription($row['id_subscribe'], $row['id_member']);
		}
		$db->free_result($request);]]></search>
			<add><![CDATA[		);
		while ($row = $db->fetch_assoc($request))
		{
			require_once(SUBSDIR . '/PaidSubscriptions.subs.php');
			removeSubscription($row['id_subscribe'], $row['id_member']);
		}
		$db->free_result($request);]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		global $modSettings;

		$db = database();
		$user_access_mentions = @unserialize($modSettings['user_access_mentions']);

		// This should be set only because of an immediate scheduled task, so higher priority
		if (!empty($user_access_mentions))]]></search>
			<add><![CDATA[		global $modSettings;

		$db = database();
		$user_access_mentions = Util::unserialize($modSettings['user_access_mentions']);

		// This should be set only because of an immediate scheduled task, so higher priority
		if (!empty($user_access_mentions))]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[				if ($db->num_rows($request2) == 1)
				{
					if (!empty($modSettings['user_access_mentions']))
						$modSettings['user_access_mentions'] = @unserialize($modSettings['user_access_mentions']);
					else
						$modSettings['user_access_mentions'] = array();
]]></search>
			<add><![CDATA[				if ($db->num_rows($request2) == 1)
				{
					if (!empty($modSettings['user_access_mentions']))
						$modSettings['user_access_mentions'] = Util::unserialize($modSettings['user_access_mentions']);
					else
						$modSettings['user_access_mentions'] = array();
]]></add>
		</operation>
	</file>
	<file name="SUBSDIR/ScheduledTasks.subs.php">
		<operation>
			<search position="replace"><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.0
 *
 */
]]></search>
			<add><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.0.8
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	while ($row = $db->fetch_assoc($request))
	{
		// scheduleTaskImmediate is a way to speed up scheduled tasts and fire them as fast as possible
		$scheduleTaskImmediate = @unserialize($modSettings['scheduleTaskImmediate']);
		if (!empty($scheduleTaskImmediate) && isset($scheduleTaskImmediate[$row['task']]))
			$next_time = next_time(1, '', rand(0, 60), true);
		else]]></search>
			<add><![CDATA[	while ($row = $db->fetch_assoc($request))
	{
		// scheduleTaskImmediate is a way to speed up scheduled tasts and fire them as fast as possible
		$scheduleTaskImmediate = Util::unserialize($modSettings['scheduleTaskImmediate']);
		if (!empty($scheduleTaskImmediate) && isset($scheduleTaskImmediate[$row['task']]))
			$next_time = next_time(1, '', rand(0, 60), true);
		else]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	if ($completed)
	{
		// Taking care of scheduleTaskImmediate having a maximum of 10 "fast" executions
		$scheduleTaskImmediate = @unserialize($modSettings['scheduleTaskImmediate']);
		if (!empty($scheduleTaskImmediate) && isset($scheduleTaskImmediate[$task_name]))
		{
			$scheduleTaskImmediate[$task_name]++;]]></search>
			<add><![CDATA[	if ($completed)
	{
		// Taking care of scheduleTaskImmediate having a maximum of 10 "fast" executions
		$scheduleTaskImmediate = Util::unserialize($modSettings['scheduleTaskImmediate']);
		if (!empty($scheduleTaskImmediate) && isset($scheduleTaskImmediate[$task_name]))
		{
			$scheduleTaskImmediate[$task_name]++;]]></add>
		</operation>
	</file>
	<file name="SUBSDIR/SearchAPI-Custom.class.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.0
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.0.8
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		if (empty($modSettings['search_custom_index_config']))
			return;

		$this->indexSettings = unserialize($modSettings['search_custom_index_config']);

		$this->bannedWords = empty($modSettings['search_stopwords']) ? array() : explode(',', $modSettings['search_stopwords']);
		$this->min_word_length = $this->indexSettings['bytes_per_word'];]]></search>
			<add><![CDATA[		if (empty($modSettings['search_custom_index_config']))
			return;

		$this->indexSettings = Util::unserialize($modSettings['search_custom_index_config']);

		$this->bannedWords = empty($modSettings['search_stopwords']) ? array() : explode(',', $modSettings['search_stopwords']);
		$this->min_word_length = $this->indexSettings['bytes_per_word'];]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[
		$db = database();

		$customIndexSettings = unserialize($modSettings['search_custom_index_config']);

		$inserts = array();
		foreach (text2words($msgOptions['body'], $customIndexSettings['bytes_per_word'], true) as $word)]]></search>
			<add><![CDATA[
		$db = database();

		$customIndexSettings = Util::unserialize($modSettings['search_custom_index_config']);

		$inserts = array();
		foreach (text2words($msgOptions['body'], $customIndexSettings['bytes_per_word'], true) as $word)]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[
		if (isset($msgOptions['body']))
		{
			$customIndexSettings = unserialize($modSettings['search_custom_index_config']);
			$stopwords = empty($modSettings['search_stopwords']) ? array() : explode(',', $modSettings['search_stopwords']);
			$old_body = isset($msgOptions['old_body']) ? $msgOptions['old_body'] : '';
]]></search>
			<add><![CDATA[
		if (isset($msgOptions['body']))
		{
			$customIndexSettings = Util::unserialize($modSettings['search_custom_index_config']);
			$stopwords = empty($modSettings['search_stopwords']) ? array() : explode(',', $modSettings['search_stopwords']);
			$old_body = isset($msgOptions['old_body']) ? $msgOptions['old_body'] : '';
]]></add>
		</operation>
	</file>
	<file name="SUBSDIR/SettingsForm.class.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.0.7
 *
 *
 * Adding options to one of the setting screens isn't hard.]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.0.8
 *
 *
 * Adding options to one of the setting screens isn't hard.]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[					if ($config_var[0] == 'select' && !empty($config_var['multiple']))
					{
						$context['config_vars'][$config_var[1]]['name'] .= '[]';
						$context['config_vars'][$config_var[1]]['value'] = !empty($context['config_vars'][$config_var[1]]['value']) ? unserialize($context['config_vars'][$config_var[1]]['value']) : array();
					}

					// If it's associative]]></search>
			<add><![CDATA[					if ($config_var[0] == 'select' && !empty($config_var['multiple']))
					{
						$context['config_vars'][$config_var[1]]['name'] .= '[]';
						$context['config_vars'][$config_var[1]]['value'] = !empty($context['config_vars'][$config_var[1]]['value']) ? Util::unserialize($context['config_vars'][$config_var[1]]['value']) : array();
					}

					// If it's associative]]></add>
		</operation>
	</file>
	<file name="SUBSDIR/Topic.subs.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.0.7
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.0.8
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	// Delete search index entries.
	if (!empty($modSettings['search_custom_index_config']))
	{
		$customIndexSettings = unserialize($modSettings['search_custom_index_config']);

		$request = $db->query('', '
			SELECT id_msg, body]]></search>
			<add><![CDATA[	// Delete search index entries.
	if (!empty($modSettings['search_custom_index_config']))
	{
		$customIndexSettings = Util::unserialize($modSettings['search_custom_index_config']);

		$request = $db->query('', '
			SELECT id_msg, body]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[ */
function previousTopic($id_topic, $id_board, $id_member = 0, $includeUnapproved = false, $includeStickies = true)
{
	return topicPointer($id_topic, $id_board, false, $id_member = 0, $includeUnapproved = false, $includeStickies = true);
}

/**]]></search>
			<add><![CDATA[ */
function previousTopic($id_topic, $id_board, $id_member = 0, $includeUnapproved = false, $includeStickies = true)
{
	return topicPointer($id_topic, $id_board, false, $id_member, $includeUnapproved, $includeStickies);
}

/**]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[ */
function nextTopic($id_topic, $id_board, $id_member = 0, $includeUnapproved = false, $includeStickies = true)
{
	return topicPointer($id_topic, $id_board, true, $id_member = 0, $includeUnapproved = false, $includeStickies = true);
}

/**]]></search>
			<add><![CDATA[ */
function nextTopic($id_topic, $id_board, $id_member = 0, $includeUnapproved = false, $includeStickies = true)
{
	return topicPointer($id_topic, $id_board, true, $id_member, $includeUnapproved, $includeStickies);
}

/**]]></add>
		</operation>
	</file>
	<file name="SUBSDIR/Util.class.php">
		<operation>
			<search position="replace"><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.0
 *
 */
]]></search>
			<add><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.0.8
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	 * @param int $level = 0
	 * @return array|string
	 */
	public function urldecode_recursive($var, $level = 0)
	{
		if (!is_array($var))
			return urldecode($var);]]></search>
			<add><![CDATA[	 * @param int $level = 0
	 * @return array|string
	 */
	public static function urldecode_recursive($var, $level = 0)
	{
		if (!is_array($var))
			return urldecode($var);]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[
		// Add the htmlspecialchars to every element.
		foreach ($var as $k => $v)
			$new_var[urldecode($k)] = $level > 25 ? null : urldecode_recursive($v, $level + 1);

		return $new_var;
	}]]></search>
			<add><![CDATA[
		// Add the htmlspecialchars to every element.
		foreach ($var as $k => $v)
			$new_var[urldecode($k)] = $level > 25 ? null : self::urldecode_recursive($v, $level + 1);

		return $new_var;
	}]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	 * @param mixed[]|string $var
	 * @return array|string
	 */
	public function unescapestring_recursive($var)
	{
		$db = database();
]]></search>
			<add><![CDATA[	 * @param mixed[]|string $var
	 * @return array|string
	 */
	public static function unescapestring_recursive($var)
	{
		$db = database();
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[
		// Strip the slashes from every element.
		foreach ($var as $k => $v)
			$new_var[$db->unescape_string($k)] = unescapestring_recursive($v);

		return $new_var;
	}
}]]></search>
			<add><![CDATA[
		// Strip the slashes from every element.
		foreach ($var as $k => $v)
			$new_var[$db->unescape_string($k)] = self::unescapestring_recursive($v);

		return $new_var;
	}

	/**
	 * Wrappers for unserialize
	 * What it does:
	 * - if using PHP < 7 it will use ext/safe_unserialize
	 * - if using PHP > 7 will use the built in unserialize
	 *
	 * @param string $string The string to unserialize
	 * @param string[] $options Optional, mimic the PHP 7+ option,
	 *                          see PHP documentation for the details
	 *                          additionally, it doesn't allow to use the option:
	 *                            allowed_classes => true
	 *                          that is reverted to false.
	 * @return array|string
	 */
	public static function unserialize($string, $options = array())
	{
		static $function = null;

		if ($function === null)
		{
			if (version_compare(PHP_VERSION, '7', '>='))
			{
				$function = 'unserialize';
			}
			else
			{
				require_once(EXTDIR . '/serialize.php');
				$function = 'ElkArte\\ext\\upgradephp\\safe_unserialize';
			}
		}

		if (!isset($options['allowed_classes']) || $options['allowed_classes'] === true)
		{
			$options['allowed_classes'] = false;
		}

		return @$function($string, $options);
	}
}]]></add>
		</operation>
	</file>
	<file name="SUBSDIR/VerificationControls.class.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.0
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.0.8
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			$question_answers[$row['id_question']] = array(
				'id_question' => $row['id_question'],
				'question' => $row['question'],
				'answer' => unserialize($row['answer']),
				'language' => $row['language'],
			);
		}]]></search>
			<add><![CDATA[			$question_answers[$row['id_question']] = array(
				'id_question' => $row['id_question'],
				'question' => $row['question'],
				'answer' => Util::unserialize($row['answer']),
				'language' => $row['language'],
			);
		}]]></add>
		</operation>
	</file>
	<file name="SUBSDIR/Who.subs.php">
		<operation>
			<search position="replace"><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.0.1
 *
 */
]]></search>
			<add><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.0.8
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[
		while ($row = $db->fetch_assoc($request))
		{
			$credit_info = unserialize($row['credits']);

			$copyright = empty($credit_info['copyright']) ? '' : $txt['credits_copyright'] . ' &copy; ' . Util::htmlspecialchars($credit_info['copyright']);
			$license = empty($credit_info['license']) ? '' : $txt['credits_license'] . ': ' . Util::htmlspecialchars($credit_info['license']);]]></search>
			<add><![CDATA[
		while ($row = $db->fetch_assoc($request))
		{
			$credit_info = Util::unserialize($row['credits']);

			$copyright = empty($credit_info['copyright']) ? '' : $txt['credits_copyright'] . ' &copy; ' . Util::htmlspecialchars($credit_info['copyright']);
			$license = empty($credit_info['license']) ? '' : $txt['credits_license'] . ': ' . Util::htmlspecialchars($credit_info['license']);]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	foreach ($url_list as $k => $url)
	{
		// Get the request parameters..
		$actions = @unserialize($url[0]);
		if ($actions === false)
			continue;
]]></search>
			<add><![CDATA[	foreach ($url_list as $k => $url)
	{
		// Get the request parameters..
		$actions = Util::unserialize($url[0]);
		if ($actions === false)
			continue;
]]></add>
		</operation>
	</file>
	<file name="BOARDDIR/subscriptions.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.0
 * 
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.0.8
 * 
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[// Otherwise is it what we want, a purchase?
elseif ($gatewayClass->isPayment() || $gatewayClass->isSubscription())
{
	$cost = unserialize($subscription_info['cost']);
	$total_cost = $gatewayClass->getCost();
	$notify = false;

	// For one off's we want to only capture them once!
	if (!$gatewayClass->isSubscription())
	{
		$real_details = @unserialize($subscription_info['pending_details']);
		if (empty($real_details))
			generateSubscriptionError(sprintf($txt['paid_count_not_find_outstanding_payment'], $member_id, $subscription_id));
]]></search>
			<add><![CDATA[// Otherwise is it what we want, a purchase?
elseif ($gatewayClass->isPayment() || $gatewayClass->isSubscription())
{
	$cost = Util::unserialize($subscription_info['cost']);
	$total_cost = $gatewayClass->getCost();
	$notify = false;

	// For one off's we want to only capture them once!
	if (!$gatewayClass->isSubscription())
	{
		$real_details = Util::unserialize($subscription_info['pending_details']);
		if (empty($real_details))
			generateSubscriptionError(sprintf($txt['paid_count_not_find_outstanding_payment'], $member_id, $subscription_id));
]]></add>
		</operation>
	</file>
	<file name="LANGUAGEDIR/english/Post.english.php">
		<operation>
			<search position="replace"><![CDATA[$txt['more_smileys_pick'] = 'Pick a smiley';
$txt['more_smileys_close_window'] = 'Close Window';

$txt['error_new_reply'] = 'while you were typing a new reply has been posted. You may wish to review your post.';
$txt['error_new_replies'] = 'while you were typing %1$d new replies have been posted. You may wish to review your post.';
$txt['error_new_reply_reading'] = 'while you were reading a new reply has been posted. You may wish to review your post.';
$txt['error_new_replies_reading'] = 'while you were reading %1$d new replies have been posted. You may wish to review your post.';

$txt['announce_this_topic'] = 'Send an announcement about this topic to the members:';
$txt['announce_title'] = 'Send an announcement';]]></search>
			<add><![CDATA[$txt['more_smileys_pick'] = 'Pick a smiley';
$txt['more_smileys_close_window'] = 'Close Window';

$txt['error_new_reply'] = 'While you were typing a new reply has been posted. You may wish to review your post.';
$txt['error_new_replies'] = 'While you were typing %1$d new replies have been posted. You may wish to review your post.';
$txt['error_new_reply_reading'] = 'While you were reading a new reply has been posted. You may wish to review your post.';
$txt['error_new_replies_reading'] = 'While you were reading %1$d new replies have been posted. You may wish to review your post.';

$txt['announce_this_topic'] = 'Send an announcement about this topic to the members:';
$txt['announce_title'] = 'Send an announcement';]]></add>
		</operation>
	</file>
	<file name="THEMEDIR/scripts/elk_jquery_embed.js">
		<operation>
			<search position="replace"><![CDATA[				startAtPar = '&start=' + startAtSeconds.toString();
			}

			var embedURL = '//youtube.com/embed/' + videoID + '?rel=0' + startAtPar,
				tag = embedOrIMG(embed, a, '//img.youtube.com/vi/' + videoID + '/0.jpg', embedURL, embedURL + '&autoplay=1' );

			return [oSettings.youtube, tag];]]></search>
			<add><![CDATA[				startAtPar = '&start=' + startAtSeconds.toString();
			}

			var embedURL = '//www.youtube.com/embed/' + videoID + '?rel=0' + startAtPar,
				tag = embedOrIMG(embed, a, '//img.youtube.com/vi/' + videoID + '/0.jpg', embedURL, embedURL + '&autoplay=1' );

			return [oSettings.youtube, tag];]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			}
		}
	};
})(jQuery);]]></search>
			<add><![CDATA[			}
		}
	};
})(jQuery);]]></add>
		</operation>
	</file>
</modification>